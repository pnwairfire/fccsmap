#!/usr/bin/env python3

"""fccsmap: Returns fuelbed information by geographical location or region.
"""

__author__      = "Joel Dubowy"

import json
import logging
import os
import pathlib
import shutil
import subprocess
import sys
import traceback

from afscripting import args as scripting_args
from functools import reduce

try:
    from fccsmap import lookup, __version__
except:
    import os
    root_dir = os.path.abspath(os.path.join(sys.path[0], '../'))
    sys.path.insert(0, root_dir)
    from fccsmap import lookup, __version__


REQUIRED_ARGS = [
    {
        'short': '-s',
        'long': '--source-file',
        'help': 'single FCCS source file'
    },
    {
        'short': '-t',
        'long': '--tiles-directory',
        'help': 'directory containing tiled FCCS data files'
    }
]

OPTIONAL_ARGS = [
    {
        'short': '-x',
        'long': '--grid-cell-width',
        'help': 'grid cell width of each tile',
        'default': 256,
        'type': int
    },
    {
        'short': '-y',
        'long': '--grid-cell-height',
        'help': 'grid cell height of each tile',
        'default': 256,
        'type': int
    },
    {
        'short': '-j',
        'long': '--json-index-file-name',
        'help': 'name of index GeoJSON file (not used by fccsmap)',
        'default': 'index.json'
    },
    {
        'short': '-c',
        'long': '--csv-index-file-name',
        'help': 'name of index csv file (not used by fccsmap)',
        'default': 'index.csv'
    }
]

# Note: scripting_args.parse_args adds logging and configuration related
# options


USAGE = "usage: %prog [options] <id> [<id> ...]"

EPILOG_STR = """

Example calls:

    $ {script_name} -s fuelbeds/hawaii.tif -t ./tiles/hawaii-256x256

    $ {script_name} -s .fuelbeds/alaska.tif \\
         -t ./tiles/alaska-1024x1024 -x 1024 -y 1024

 """.format(script_name=sys.argv[0])

def create_tiles_dir(args):
    tiles_directory = os.path.abspath(args.tiles_directory)

    if os.path.exists(tiles_directory):
        print(f"\n{tiles_directory} already exists\n")
        r = input(f"Is it ok to clear out {tiles_directory} [yN]?")
        if r.lower() in ('y', 'yes'):
            shutil.rmtree(tiles_directory)
        else:
            print("Exiting")
            sys.exit(1)

    pathlib.Path(tiles_directory).mkdir(parents=True, exist_ok=True)

    return tiles_directory

INDEX_SHAPEFILE_NAME = "index.shp"

def main():
    parser, args = scripting_args.parse_args(REQUIRED_ARGS, OPTIONAL_ARGS,
        epilog=EPILOG_STR)

    source_file = os.path.abspath(args.source_file)
    if not os.path.exists(source_file):
        print(f"\nSource file does not exist - {source_file}\n")
        sys.exit(1)

    tiles_directory = create_tiles_dir(args)

    # Create tiles
    subprocess.run([
        "gdal_retile.py", source_file,
        "-ps", str(args.grid_cell_width), str(args.grid_cell_height),
        "-targetDir", tiles_directory,
        "-tileIndex", INDEX_SHAPEFILE_NAME,
        "-csv", args.csv_index_file_name,
    ])

    # Convert index shape file to GeoJSON
    index_shapefile = os.path.join(tiles_directory, INDEX_SHAPEFILE_NAME)
    index_json_file = os.path.join(tiles_directory, args.json_index_file_name)
    subprocess.run([
        "ogr2ogr", "-f", "GeoJSON", index_json_file, index_shapefile
    ])

if __name__ == "__main__":
    main()
