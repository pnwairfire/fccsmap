#!/usr/bin/env python3

"""fccsmap: Generates plot of fccs data.
"""

__author__      = "Joel Dubowy"

import json
import logging
import os
import subprocess
import sys
import traceback
import tempfile

import matplotlib.pyplot as plt
import numpy as np
from afscripting import args as scripting_args
from functools import reduce
from osgeo import gdal
from shapely import ops, geometry

try:
    from fccsmap import lookup
except:
    import os
    root_dir = os.path.abspath(os.path.join(sys.path[0], '../'))
    sys.path.insert(0, root_dir)
    from fccsmap import lookup


OPTIONAL_ARGS = [
    {
        'short': '-g',
        'long': '--geo-data',
        'help': 'json-formated geometry vector data; '
            'ex. \'{"type": "Polygon","coordinates": [[[-121.5212, 48.3082],[-121.5215, 48.3069],[-121.5211, 48.3095],[-121.5212, 48.3082]]]}\''
    },
    {
        'short': '-f',
        'long': '--geo-data-file',
        'help': 'json-formated geometry vector data in a separate file'
    },
    {
        'short': '-n',
        'long': '--neighborhood-dimensions-factor',
        'help': 'expand (or reduce) dimensions of plotted area by this factor',
        'type': int,
        'default': 4

    },
    {
        'long': '--plot-geo-data',
        'action': 'store_true',
        'help': 'Overlay geo data over fccs grid in plot image'
    },
    {
        'short': '-o',
        'long': '--output-image-file',
        'help': 'save plot to image file'
    }
]

# Note: scripting_args.parse_args adds logging and configuration related options


USAGE = "usage: %prog [options] <id> [<id> ...]"

EPILOG_STR = """

Valid Options:

{options_str}

Example calls:

  Single point near Snoqualmie pass

    $ {script_name} --log-level=INFO -g '{{
          "type": "Point",
          "coordinates": [-121.4522115, 47.4316976]
        }}'

  Single point in Lake Chelan, with expanded neighborhood and using FCCS v1

    $ {script_name} --log-level=INFO -g '{{
          "type": "Point",
          "coordinates": [-120.3606708, 48.0364064]
        }}' -n 10 --config-option fccs_version=2

  Area around Snoqualmie pass

    $ {script_name} --log-level=INFO -g '{{
          "type": "Polygon",
          "coordinates": [
            [
              [-121.4522115, 47.4316976],
              [-121.3990506, 47.4316976],
              [-121.3990506, 47.4099293],
              [-121.4522115, 47.4099293],
              [-121.4522115, 47.4316976]
            ]
          ]
        }}'

 """.format(options_str=lookup.FccsLookUp.OPTIONS_STRING,
    script_name=sys.argv[0])

def load_geo_data(args):
    if args.geo_data_file:
        with open(args.geo_data_file) as f:
            geo_data = f.read()
    else:
        geo_data = args.geo_data
    return json.loads(geo_data)

def get_shape(geo_data, fccs_lookup):
    shape = geometry.shape(geo_data)
    return ops.transform(fccs_lookup.projector, shape)

def get_shapes(fccs_lookup, geo_data):
    geo_shape = get_shape(geo_data, fccs_lookup)
    if geo_data["type"] in ('Point', 'MultiPoint'):
        bounding_shape = get_shape(fccs_lookup._transform_points(geo_data, 0.5),
            fccs_lookup) #fccs_lookup.grid_resolution)
    else:
        # TODO: replace with minimal polygon containing all coordinates
        bounding_shape = geo_shape

    return geo_shape, bounding_shape

def expand(min_val, max_val, neighborhood_dimensions_factor):
    center = (max_val + min_val) / 2
    delta_from_center = ((max_val-min_val) / 2) * neighborhood_dimensions_factor
    max_val = center + delta_from_center
    min_val = center - delta_from_center
    return min_val, max_val

def convert_xy(xy, min_x, max_x, min_y, max_y, len_x, len_y):
    def _(v, min_v, max_v, len_v, flip):
        new_v = (((v - min_v) / (max_v - min_v)) * len_v)
        if flip:
            new_v = len_v - new_v
        else:
            new_v = new_v
        new_v -= 0.5

        return new_v

    new_x = [_(x, min_x, max_x, len_x, False) for x in xy[0]]
    new_y = [_(y, min_y, max_y, len_y, True) for y in xy[1]]

    return (new_x, new_y)

def plot_geoms(shape, min_x, max_x, min_y, max_y, len_x, len_y):
    xys = []

    if shape.type == 'MultiPolygon':
        xys = [geom.exterior.xy for geom in shape.geoms]
    elif shape.type == 'Polygon':
        xys = [shape.exterior.xy]
    elif shape.type == 'Point':
        xys = [shape.xy]
    # TODO: else support any other shape (e.g. MultiPoint?

    for xy in xys:
        #axs.fill(xs, ys, alpha=0.5, fc='r', ec='none')
        xy = convert_xy(xy, min_x, max_x, min_y, max_y, len_x, len_y)
        plt.plot(*xy, color='red')

    # TODO: else plot point


def plot(geo_shape, bounding_shape, fccs_lookup,
        neighborhood_dimensions_factor, plot_geo_data, output_image_file):

    with tempfile.TemporaryDirectory() as tmpdirname:
        # using gdal_translate to extract data. e.g.
        #  gdal_translate -projwin -1921306.7467230938 2984866.5269676857 -1896597.2850769295 2960331.6517833835 -of GTiff fccs2_fuelload.nc reduced.tif
        #  gdal_translate -projwin -1921306.7467230938 2984866.5269676857 -1896597.2850769295 2960331.6517833835 -of NetCDF fccs2_fuelload.nc reduced.nc
        max_x = max(bounding_shape.bounds[0], bounding_shape.bounds[2])
        min_x = min(bounding_shape.bounds[0], bounding_shape.bounds[2])
        max_y = max(bounding_shape.bounds[1], bounding_shape.bounds[3])
        min_y = min(bounding_shape.bounds[1], bounding_shape.bounds[3])
        logging.info(f"x,y bounds (before any expansion): {min_x}, {max_x}  {min_y},{max_y}")

        if neighborhood_dimensions_factor and neighborhood_dimensions_factor != 1:
            min_x, max_x = expand(min_x, max_x, neighborhood_dimensions_factor)
            min_y, max_y = expand(min_y, max_y, neighborhood_dimensions_factor)
        logging.info(f"New x,y ranges: {min_x}, {max_x}  {min_y},{max_y}")

        reduced_file = os.path.join(tmpdirname, 'reduced.nc')
        translate_cmd = ["gdal_translate", "-projwin",
            str(min_x), str(max_y), str(max_x), str(min_y),
            "-of", "NetCDF", f"NETCDF:{fccs_lookup.filename}:{fccs_lookup.param}",
            reduced_file]
        r = subprocess.run(translate_cmd)
        if r.returncode:
            # TODO: capture stderr when running and output it here
            logging.error("gdal_translate returne error code %s", r.returncode)
            sys.exit(1)

        reduced_dataset = gdal.Open(reduced_file)
        data = reduced_dataset.GetRasterBand(1).ReadAsArray()

        # The min_x, etc. specifed in call to gdal_translate can cut
        # through grid cells, but what's drawn in ax.text are the full
        # grid cells. So, we need to account for this when plotting input
        # geo data) by getting the min_x, max_x, min_y, max_y of the extracted
        # data, and using them when plotting input data, below
        ulx, xres, xskew, uly, yskew, yres  = reduced_dataset.GetGeoTransform()
        lrx = ulx + (reduced_dataset.RasterXSize * xres)
        lry = uly + (reduced_dataset.RasterYSize * yres)
        min_x = ulx
        max_x = lrx
        min_y = lry
        max_y = uly

        fig, ax = plt.subplots()
        ax.matshow(data, cmap='ocean')
        for (i, j), z in np.ndenumerate(data):
            ax.text(j, i, '{}'.format(z), ha='center', va='center')

        len_y = len(data)
        len_x = len(data[0])
        plot_geoms(bounding_shape, min_x, max_x, min_y, max_y, len_x, len_y)
        if plot_geo_data:
            plot_geoms(geo_shape, min_x, max_x, min_y, max_y, len_x, len_y)

        if output_image_file:
            plt.savefig(output_image_file)

        plt.show()


def main():
    parser, args = scripting_args.parse_args([], OPTIONAL_ARGS,
        epilog=EPILOG_STR)

    if 1 != sum([int(not not e) for e in
            [args.geo_data, args.geo_data_file]]):
        scripting_args.exit_with_msg(
            "Specify either '-g'/'--geo-data' or '-f'/'--geo-data-file'",
            extra_output=lambda: parser.print_help())

    try:
        fccs_lookup = lookup.FccsLookUp(**(args.config_options or {}))
        geo_data = load_geo_data(args)
        geo_shape, bounding_shape = get_shapes(fccs_lookup, geo_data)
        plot(geo_shape, bounding_shape, fccs_lookup,
            args.neighborhood_dimensions_factor, args.plot_geo_data,
            args.output_image_file)

    except Exception as e:
        if logging.getLogger().getEffectiveLevel() <= logging.DEBUG:
            scripting_args.exit_with_msg(traceback.format_exc(), prefix="")
        else:
            scripting_args.exit_with_msg(e)

if __name__ == "__main__":
    main()
