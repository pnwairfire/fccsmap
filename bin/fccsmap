#!/usr/bin/env python3

"""fccsmap: Returns fuelbed information by geographical location or region.
"""

__author__      = "Joel Dubowy"

import json
import logging
import sys
import traceback

from afscripting import args as scripting_args
from functools import reduce

try:
    from fccsmap import lookup, tileslookup, __version__
except:
    import os
    root_dir = os.path.abspath(os.path.join(sys.path[0], '../'))
    sys.path.insert(0, root_dir)
    from fccsmap import lookup, tileslookup, __version__


OPTIONAL_ARGS = [
    {
        'short': '-i',
        'long': '--indices',
        'help': "comma-separated grid indices (scalar or range); "
            "ex. '10,3', '10:15,0:5'"
    },
    {
        'short': '-g',
        'long': '--geo-data',
        'help': 'json-formated geometry vector data; '
            'ex. \'{"type": "MultiPolygon","coordinates": [[[[-121.5212, 48.3082],[-121.5215, 48.3069],[-121.5211, 48.3095],[-121.5212, 48.3082]]],[[[-121.5042, 48.3242],[-121.5045, 48.3228],[-121.5041, 48.3255],[-121.5042, 48.3242]]]]}\''
    },
    {
        'short': '-f',
        'long': '--geo-data-file',
        'help': 'json-formated geometry vector data in a separate file'
    },
    {
        'short': "-v",
        'long': '--version',
        'dest': 'version',
        'action': 'store_true',
        'help': "Output fccsmap package version and exit.",
        'default': False
    },
    {
        'long': '--indent',
        'type': int,
        'help': "Identation to use in json output"
    }
]

# Note: scripting_args.parse_args adds logging and configuration related
# options


USAGE = "usage: %prog [options] <id> [<id> ...]"

EPILOG_STR = """

Valid Options (without tiles):

{options_str}

Valid Options (with tiles):

{tiles_options_str}

Example calls:

  Single point near Snoqualmie pass

    $ {script_name} --log-level=DEBUG --indent 4 -g '{{
          "type": "Point",
          "coordinates": [-121.4522115, 47.4316976]
        }}'

  Single point in Lake Chelan

    $ {script_name} --log-level=DEBUG --indent 4 -g '{{
          "type": "Point",
          "coordinates": [-120.3606708, 48.0364064]
        }}'

  MultiPoint example

    $ {script_name} --log-level=DEBUG --indent 4 -g '{{
          "type": "MultiPoint",
          "coordinates": [
            [-121.4522115, 47.4316976],
            [-120.0, 48.0]
          ]
        }}'

  Area around Snoqualmie pass

    $ {script_name} --log-level=DEBUG --indent 4 -g '{{
          "type": "Polygon",
          "coordinates": [
            [
              [-121.4522115, 47.4316976],
              [-121.3990506, 47.4316976],
              [-121.3990506, 47.4099293],
              [-121.4522115, 47.4099293],
              [-121.4522115, 47.4316976]
            ]
          ]
        }}'

  WA state

    $ {script_name} --log-level=DEBUG --indent 4 -g '{{
          "type": "Polygon",
          "coordinates": [
            [[-125.0, 49.0],[-117.0, 49.0],[-117.0, 45.0],[-125.0, 45.0],[-125.0, 49.0]
            ]
          ]
        }}'

  MultiPolygon example

    $ {script_name} --log-level=DEBUG --indent 4 -g '{{
          "type": "MultiPolygon",
          "coordinates": [
            [[[-120.9, 48.1],[-120.9, 47.9],[-121.1, 47.9],[-121.1, 48.1]]],
            [[[-121.3, 48.3],[-121.5, 48.3],[-121.5, 48.5],[-121.3, 48.5]]]
          ]
        }}'

  Single point with options (should return empty fuelbeds dict)

    $ {script_name} --log-level=DEBUG --indent 4  \\
        --json-config-option ignored_fuelbeds='["900"]' \\
        --boolean-config-option no_sampling=True \\
        -g '{{
          "type": "Point",
          "coordinates": [-120.3606708, 48.0364064]
        }}'

  Using tiles:

    $ {script_name} --log-level=DEBUG --indent 4 \\
        --config-option tiles_directory=./tiles/hawaii \\
        --config-option index_shapefile=./tiles/hawaii/index.shp \\
        -g '{{
          "type": "Polygon",
          "coordinates": [
            [[-156.3, 20.7],[-156.3, 20.8],[-156.2, 20.8],[-156.2, 20.7],[-156.3, 20.7]]
          ]
        }}'

    $ {script_name} --log-level=DEBUG --indent 4 \\
        --config-option tiles_directory=./tiles/conus \\
        --config-option index_shapefile=index.shp \\
        -g '{{
          "type": "MultiPolygon",
          "coordinates": [
            [[[-120.9, 48.1],[-120.9, 47.9],[-121.1, 47.9],[-121.1, 48.1]]],
            [[[-121.3, 48.3],[-121.5, 48.3],[-121.5, 48.5],[-121.3, 48.5]]]
          ]
        }}'

 """.format(options_str=lookup.FccsLookUp.OPTIONS_STRING
    + lookup.FccsLookUp.ADDITIONAL_OPTIONS_STRING,
    tiles_options_str=lookup.FccsLookUp.OPTIONS_STRING
    + tileslookup.FccsTilesLookUp.ADDITIONAL_OPTIONS_STRING,
    script_name=sys.argv[0])

def output_version(parser, args):
    if args.version:
        sys.stdout.write("fccsmap package version {}\n".format(__version__))
        sys.exit(0)

def main():
    parser, args = scripting_args.parse_args([], OPTIONAL_ARGS,
        epilog=EPILOG_STR, pre_validation=output_version)

    if 1 != sum([int(not not e) for e in
            [args.indices, args.geo_data, args.geo_data_file]]):
        scripting_args.exit_with_msg(
            "Specify either '-i'/'--indices', '-g'/'--geo-data', or '-f'/'--geo-data-file'",
            extra_output=lambda: parser.print_help())

    try:
        options = args.config_options or {}
        tiles_directory = options.get('tiles_directory')
        if tiles_directory:
            fccs_lookup = tileslookup.FccsTilesLookUp(**options)
        else:
            fccs_lookup = lookup.FccsLookUp(**options)

        if args.indices:
            raise NotImplementedError(
                "Looking up fuelbeds by grid indices not supported")
        else:
            if args.geo_data_file:
                with open(args.geo_data_file) as f:
                    input_data = f.read()
            else:
                input_data = args.geo_data

            data = fccs_lookup.look_up(json.loads(input_data))

        sys.stdout.write(json.dumps(data, indent=args.indent))

    except Exception as e:
        if logging.getLogger().getEffectiveLevel() <= logging.DEBUG:
            scripting_args.exit_with_msg(traceback.format_exc(), prefix="")
        else:
            scripting_args.exit_with_msg(e.message)

if __name__ == "__main__":
    main()
